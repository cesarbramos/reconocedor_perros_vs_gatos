# -*- coding: utf-8 -*-
"""reconocedor_perros_gatos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AQidEkeHS41zZDuVo48CRR3MHtuf8pzn
"""

import tensorflow as tf
import tensorflow_datasets as tfds
import gc

print(tf.config.list_physical_devices())
print(tf.config.list_logical_devices())

#Descarga el dataset
data, metadata = tfds.load('cats_vs_dogs', as_supervised=True, with_info=True)

tfds.as_dataframe(data['train'].take(5), metadata)

import matplotlib.pyplot as plt
import cv2

plt.figure(figsize=(30, 30))
IMG_SIZE = 100

train_data = []

x = [] # Datos de entrada (array de pixeles).
y = [] # Etiquetas (Perro o gato) tensores.

for i, (img, label) in enumerate(data['train']): #Datos de entrenamiento
  img = cv2.resize(img.numpy(), (IMG_SIZE, IMG_SIZE))
  img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  img = img.reshape(IMG_SIZE, IMG_SIZE, 1) # Cambia tama√±o a [100, 100, 1]
  train_data.append([img, label])
  x.append(img)
  y.append(label)

import numpy as np

x = np.array(x).astype(float) / 255
y = np.array(y)

#Realizar el aumento de datos con varias transformaciones. Al final, graficar 10 como ejemplo
from tensorflow.keras.preprocessing.image import ImageDataGenerator

datagen = ImageDataGenerator(
    rotation_range=30,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=15,
    zoom_range=[0.7, 1.4],
    horizontal_flip=True,
    vertical_flip=True
)

datagen.fit(x)

plt.figure(figsize=(20,8))

for img, label in datagen.flow(x, y, batch_size=10, shuffle=False):
  for i in range(10):
    plt.subplot(2, 5, i+1)
    plt.xticks([])
    plt.yticks([])
    plt.imshow(img[i].reshape(100, 100), cmap="gray")
  break

# Definicion del modelo
# Modelo convolucional

modeloCNN = tf.keras.models.Sequential([
  tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(100, 100, 1)),
  tf.keras.layers.MaxPooling2D(2, 2),
  tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
  tf.keras.layers.MaxPooling2D(2, 2),
  tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
  tf.keras.layers.MaxPooling2D(2, 2),

  tf.keras.layers.Flatten(),
  tf.keras.layers.Dense(100, activation='relu'),
  tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compilar modelo

modeloCNN.compile(optimizer='adam',
                    loss='binary_crossentropy',
                    metrics=['accuracy'])

from tensorflow.keras.callbacks import TensorBoard

# Definicion de datos para entrenamiento y datos de pruebas
# Se toma el 85% de los datos para entrenar y el otro 15% para pruebas
x_entrenamiento = x[:19700]
x_validacion = x[19700:]

y_entrenamiento = y[:19700]
y_validacion = y[19700:]

data_gen_entrenamiento = datagen.flow(x_entrenamiento, y_entrenamiento, batch_size=32)

tensorboardCNN = TensorBoard(log_dir='logs/cnn')
gc.collect()

with tf.device('/device:XLA_GPU:0'):
    modeloCNN.fit(
        data_gen_entrenamiento,
        epochs=125,
        validation_data=(x_validacion, y_validacion),
        steps_per_epoch=int(np.ceil(len(x_entrenamiento) / 32)),
        callbacks=[tensorboardCNN]
    )

modeloCNN.save('perros-gatos-cnn.keras')

# Commented out IPython magic to ensure Python compatibility.
#Cargar la extension de tensorboard de colab
# %load_ext tensorboard

# Commented out IPython magic to ensure Python compatibility.
#Ejecutar tensorboard e indicarle que lea la carpeta "logs"
# %tensorboard --logdir logs